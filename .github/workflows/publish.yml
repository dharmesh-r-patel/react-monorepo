name: Publish Packages

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main      
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full history for versioning

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org/'

      - name: Setup Yarn
        run: yarn set version stable

      - name: Install Dependencies
        run: yarn install --immutable

      - name: Build Packages
        run: yarn build

      - name: Setup .npmrc
        run: |
          echo "registry=https://registry.npmjs.org/" > ~/.npmrc
          echo "@infineit:registry=https://registry.npmjs.org/" >> ~/.npmrc
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc

      - name: Verify npm authentication
        run: npm whoami
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # - name: "Get previous version from npm"
      #   run: |
      #      echo "$(npm view your-package-name version)" > .version

      # - name: Get Latest Version from npm
      #   run: |
      #     for pkg in $(ls -d packages/*/ | xargs -n1 basename); do
      #       latest_version=$(npm show @infineit/$pkg version || echo "0.0.0")
      #       jq --arg version "$latest_version" '.version = $version' packages/$pkg/package.json > packages/$pkg/package.json.tmp
      #       mv packages/$pkg/package.json.tmp packages/$pkg/package.json
      #     done   
      
      - name: Version Packages
        run: |
          lerna version --conventional-commits --yes --no-git-tag-version --no-push      


      - name: Publish Packages
        run: |
          lerna publish --conventional-commits --no-git-tag-version --yes
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

# name: Publish Packages

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main      
#   workflow_dispatch:

# jobs:
#   build-and-publish:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0  # Ensure full history for versioning

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20.x'
#           registry-url: 'https://registry.npmjs.org/'

#       - name: Setup Yarn
#         run: yarn set version stable

#       - name: Install Dependencies
#         run: yarn install --immutable

#       - name: Build Packages
#         run: yarn build

#       - name: Setup .npmrc
#         run: |
#           echo "registry=https://registry.npmjs.org/" > ~/.npmrc
#           echo "@infineit:registry=https://registry.npmjs.org/" >> ~/.npmrc
#           echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc

#       - name: Verify npm authentication
#         run: npm whoami
#         env:
#           NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

#       - name: Configure Git
#         run: |
#           git config --global user.name "github-actions[bot]"
#           git config --global user.email "github-actions[bot]@users.noreply.github.com"
#           git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/dharmesh-r-patel/react-monorepo.git
#           git pull --rebase origin main

#       - name: Fetch and Clean Remote Tags
#         run: |
#           git fetch --tags --force
#           git tag -d $(git tag -l) || true
#           git fetch --tags

#       - name: Test Git Authentication
#         run: |
#           git ls-remote https://x-access-token:${{ secrets.GH_PAT }}@github.com/dharmesh-r-patel/react-monorepo.git

#       - name: "Version and publish"
#         run: |
#           if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
#             lerna version --conventional-commits --conventional-graduate --yes
#           else
#             lerna version --conventional-commits --conventional-prerelease --preid beta --yes
#           fi

#       - name: Publish Packages
#         run: |
#           # lerna publish from-git --yes --loglevel verbose || (echo "Publish failed! Reverting..." && git reset --hard HEAD~1)
#           lerna publish from-package -y --no-verify-access
#         env:
#           NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}


# name: Publish Packages

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main      
#   workflow_dispatch:

# jobs:
#   build-and-publish:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0  # Ensure full history for versioning

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20.x'
#           registry-url: 'https://registry.npmjs.org/'

#       - name: Setup Yarn
#         run: yarn set version stable

#       - name: Install Dependencies
#         run: yarn install --immutable

#       - name: Build Packages
#         run: yarn build

#       - name: Setup .npmrc
#         run: |
#           echo "registry=https://registry.npmjs.org/" > ~/.npmrc
#           echo "@infineit:registry=https://registry.npmjs.org/" >> ~/.npmrc
#           echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc

#       - name: Verify npm authentication
#         run: npm whoami
#         env:
#           NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}


#       # - name: Configure Git
#       #   run: |
#       #       git config --global user.name "github-actions[bot]"
#       #       git config --global user.email "github-actions[bot]@users.noreply.github.com"
#       #       git remote set-url origin https://oauth2:${{ secrets.GH_PAT }}@github.com/dharmesh-r-patel/react-monorepo.git

#       - name: Configure Git
#         run: |
#             git config --global user.name "github-actions[bot]"
#             git config --global user.email "github-actions[bot]@users.noreply.github.com"
#             git remote set-url origin https://oauth2:${{ secrets.GH_PAT }}@github.com/dharmesh-r-patel/react-monorepo.git
#             git fetch origin main
#             git rebase origin/main  # Apply your local commits on top of the latest remote commits


#       - name: Test Git Authentication
#         run: |
#           git ls-remote https://x-access-token:${{ secrets.GH_PAT }}@github.com/dharmesh-r-patel/react-monorepo.git
          
        


#       - name: "Version and publish"
#       #   env:
#       #       GH_TOKEN: ${{ secrets.GH_PAT }}
#       #   run: |
#       #       git config --global user.name "Dharmesh Patel"
#       #       git config --global user.email "dharmeshbbay@gmail.com"
    
#       #       if [ ${{ github.base_ref }} = development ]; then
#       #         lerna version --conventional-commits --conventional-prerelease --preid beta --yes
#       #       else
#       #         lerna version --conventional-commits --conventional-graduate --yes
#       #       fi
#         run: |
#           lerna version --conventional-commits --conventional-graduate --yes
    

#       # - name: Configure Git User
#       #   run: |
#       #     git config --global user.name "Dharmesh Patel"
#       #     git config --global user.email "dharmeshbbay@gmail.com"
#       #     git remote set-url --push origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/dharmesh-r-patel/react-monorepo.git
#       #     git fetch --tags

#       # - name: Bump version (if needed)
#       #   run: |
#       #     git fetch --tags
#       #     git fetch origin main
#       #     lerna version patch --yes --no-private --force-publish --create-release github --conventional-commits
#       #   env:
#       #     GH_TOKEN: ${{ secrets.GH_PAT }}

#       # - name: Push version updates
#       #   run: |
#       #     git push origin main --follow-tags
#       #   env:
#       #     GH_TOKEN: ${{ secrets.GH_PAT }}

#       - name: Publish Packages
#         run: lerna publish from-git --yes --loglevel verbose
#         env:
#           NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}


# name: Publish Packages

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main      
#   workflow_dispatch:

# jobs:
#   build-and-publish:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20.x'
#           registry-url: 'https://registry.npmjs.org/'

#       - name: Setup Yarn
#         run: yarn set version stable

#       - name: Install Dependencies
#         run: yarn install --immutable

#       - name: Build Packages
#         run: yarn build

#       - name: Setup .npmrc
#         run: |
#           echo "registry=https://registry.npmjs.org/" > ~/.npmrc
#           echo "@infineit:registry=https://registry.npmjs.org/" > ~/.npmrc
#           echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc
#           cat ~/.npmrc

#       - name: Verify npm authentication
#         run: npm whoami
#         env:
#           NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}


#       - name: Configure Git User
#         run: |
#             git config --global user.name "Dharmesh Patel"
#             git config --global user.email "dharmeshbbay@gmail.com"      
#             git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/dharmesh-r-patel/react-monorepo.git    
#             git fetch --unshallow
     

#       - name: Bump version (if needed)
#         run: |
#             git fetch --tags
#             git fetch origin main
#             lerna version patch --yes --no-private --force-publish --create-release github --conventional-commits
#         env:
#             GH_TOKEN: ${{ secrets.GH_PAT }}

#       # - name: Bump version (if needed)
#       #   run: lerna version patch --yes --no-private --force-publish

#       - name: Commit changes (if any)
#         run: |
#           git config --global user.email "dharmeshbbay@gmail.com"
#           git config --global user.name "Dharmesh Patel"
#           git add -A
#           git commit -m "chore: commit changes before publish" || echo "No changes to commit"

#       - name: Debug Lerna Publish
#         run: lerna publish from-package --yes --loglevel verbose
#         env:
#           NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}


# name: Publish Packages

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main      
#   workflow_dispatch:

# jobs:
#   build-and-publish:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20.x'
#           registry-url: 'https://registry.npmjs.org/'

#       - name: Setup Yarn
#         run: yarn set version stable

#       - name: Install Dependencies
#         run: yarn install --immutable

#       - name: Build Packages
#         run: lerna run build --ignore docs

#       - name: Authenticate npm
#         run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

#       - name: Verify npm authentication
#         run: npm whoami
#         env:
#           NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

#       - name: Commit changes (if any)  # Add this step
#         run: |
#             git config --global user.name "GitHub Actions"
#             git config --global user.email "actions@github.com"
#             git add -A
#             git commit -m "chore: commit changes before publish" || echo "No changes to commit"

#       - name: Publish to NPM
#         run: lerna publish from-package --yes --force-publish
#         env:
#           NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}


# name: Publish Packages

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main      
#   workflow_dispatch:

# jobs:
#   build-and-publish:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20.x'
#           registry-url: 'https://registry.npmjs.org/'

#       - name: Setup Yarn
#         run: yarn set version stable

#       - name: Install Dependencies
#         run: yarn install --immutable

#       - name: Build Packages
#         run: lerna run build --ignore docs

#       - name: Authenticate npm
#         run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

#       - name: Verify npm authentication
#         run: npm whoami

#       - name: Publish to NPM
#         run: lerna publish from-package --yes
#         env:
#           NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}


# name: Publish Packages

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#         - main      
#   workflow_dispatch:

# jobs:
#   build-and-publish:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#             node-version: '20.x'

#       - name: Install Dependencies
#         run: yarn install

#       - name: Print current directory
#         run: pwd        

#       - name: Build Packages
#         run: lerna run build --ignore docs

#       - name: Bump Versions
#         run: |
#             git config --global user.email "dharmeshbbay@gmail.com"
#             git config --global user.name "Dharmesh Patel"
#             lerna version --yes

#       - name: Authenticate npm
#         run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

#       - name: Verify npm authentication
#         run: npm whoami


#       - name: Publish to NPM
#         run: lerna publish from-package --yes
#         env:
#           NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
